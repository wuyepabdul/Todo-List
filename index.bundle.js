(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var o=t(537),i=t.n(o),r=t(645),a=t.n(r)()(i());a.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nli {\n  list-style: none;\n}\n\n.todo-div {\n  box-shadow: 0 1px 8px 0;\n  width: 80%;\n  margin: 40px auto;\n}\n\n.todo-li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgb(139, 138, 138);\n  padding: 15px;\n}\n\n.todo-input-div {\n  display: flex;\n  align-items: center;\n}\n\n.add-todo {\n  font-style: italic;\n}\n\n.add-btn {\n  padding: 8px;\n}\n\n.add-btn:hover {\n  cursor: pointer;\n}\n\n.todo-description {\n  margin-left: 10px;\n  font-size: 18px;\n}\n\n.isChecked {\n  text-decoration: line-through;\n}\n\n.todo-input {\n  padding: 10px;\n  border: none;\n  font-size: 18px;\n  margin-left: 10px;\n}\n\n.todo-input:focus {\n  outline: #fff;\n}\n\n.fas,\n.far {\n  color: grey;\n  font-size: 20px;\n}\n\n.fas,\n.far:hover {\n  cursor: pointer;\n}\n\n.inActive {\n  display: none;\n}\n\n.clear-btn {\n  display: block;\n  padding: 20px;\n  width: 100%;\n  border: none;\n  font-size: 17px;\n}\n\n.clear-btn:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,UAAU;EACV,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;;EAEE,WAAW;EACX,eAAe;AACjB;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,aAAa;EACb,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,0BAA0B;EAC1B,eAAe;AACjB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nli {\n  list-style: none;\n}\n\n.todo-div {\n  box-shadow: 0 1px 8px 0;\n  width: 80%;\n  margin: 40px auto;\n}\n\n.todo-li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgb(139, 138, 138);\n  padding: 15px;\n}\n\n.todo-input-div {\n  display: flex;\n  align-items: center;\n}\n\n.add-todo {\n  font-style: italic;\n}\n\n.add-btn {\n  padding: 8px;\n}\n\n.add-btn:hover {\n  cursor: pointer;\n}\n\n.todo-description {\n  margin-left: 10px;\n  font-size: 18px;\n}\n\n.isChecked {\n  text-decoration: line-through;\n}\n\n.todo-input {\n  padding: 10px;\n  border: none;\n  font-size: 18px;\n  margin-left: 10px;\n}\n\n.todo-input:focus {\n  outline: #fff;\n}\n\n.fas,\n.far {\n  color: grey;\n  font-size: 20px;\n}\n\n.fas,\n.far:hover {\n  cursor: pointer;\n}\n\n.inActive {\n  display: none;\n}\n\n.clear-btn {\n  display: block;\n  padding: 20px;\n  width: 100%;\n  border: none;\n  font-size: 17px;\n}\n\n.clear-btn:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const d=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&a[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],d=0;d<n.length;d++){var c=n[d],s=o.base?c[0]+o.base:c[0],l=r[s]||0,A="".concat(s," ").concat(l);r[s]=l+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=i(u,o);o.byIndex=d,e.splice(d,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var d=t(r[a]);e[d].references--}for(var c=o(n,i),s=0;s<r.length;s++){var l=t(r[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},56:(n,e,t)=>{t.d(e,{rk:()=>i,aS:()=>r,bm:()=>a,nY:()=>d});const o={index:1,description:"",completed:!1},i=n=>{const e=document.querySelector("#new-todo"),t=document.querySelector(".add-btn");e.addEventListener("change",(n=>{o.description=n.target.value})),t.addEventListener("click",(()=>{n.push(o),n[n.length-1].index=n.length,localStorage.setItem("todos",JSON.stringify(n)),window.location.reload()}))},r=n=>{const e=document.querySelectorAll(".delete-todo");let t=[];e.forEach((e=>{e.addEventListener("click",(()=>{const o=Number(e.parentElement.id);n.forEach((e=>{o===e.index&&(t=n.filter((n=>n.index!==o)))})),t.forEach(((n,e)=>{n.index=e+1})),localStorage.setItem("todos",JSON.stringify(t)),window.location.reload()}))}))},a=n=>{document.querySelectorAll(".edit-todo").forEach((e=>{e.addEventListener("click",(()=>{const t=e.parentElement,o=e.parentElement.children[1],i=Number(e.parentElement.id);e.classList.add("inActive"),o.classList.remove("inActive"),n.forEach(((e,o)=>{if(i===e.index){const i=t.parentElement.children[0].lastElementChild;i.readOnly=!1,i.addEventListener("keyup",(t=>{e.description=t.target.value,n.splice(o,1,e),localStorage.setItem("todos",JSON.stringify(n)),"Enter"===t.key&&window.location.reload()}))}}))}))}))},d=n=>{document.querySelector(".clear-btn").addEventListener("click",(()=>{n.forEach((e=>{if(e.completed){const e=n.filter((n=>!n.completed));e.forEach(((n,e)=>{n.index=e+1})),localStorage.setItem("todos",JSON.stringify(e)),window.location.reload()}}))}))}},545:(n,e,t)=>{function o(n,e){e.forEach((e=>{const t=e.children[0].children[0],o=e.children[0].children[1];t.addEventListener("change",(()=>{t.checked?(o.classList.add("isChecked"),n.forEach((e=>{e.index===Number(t.value)&&(e.completed=!0,t.checked=!0,localStorage.setItem("todos",JSON.stringify(n)))}))):(o.classList.remove("isChecked"),n.forEach((e=>{e.index===Number(t.value)&&(e.completed=!1,localStorage.setItem("todos",JSON.stringify(n)))})))}))}))}t.d(e,{Z:()=>o})}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),o=t(795),i=t.n(o),r=t(569),a=t.n(r),d=t(565),c=t.n(d),s=t(216),l=t.n(s),A=t(589),p=t.n(A),u=t(426),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=l(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var E=t(545),m=t(56);let v='      \n<ul class="todo-ul">\n<li class="todo-li">\n  <h1>Today\'s To Do</h1>\n  <p><i class="fas fa-sync-alt"></i></p>\n</li>\n<li class="todo-li">\n  <input\n    type="text"\n    name="new-todo"\n    id="new-todo"\n    class="todo-input add-todo"\n    placeholder="Add to your list..."\n  />  \n  <button type=\'submit\' class=\'add-btn\'> Add</button>\n</li>\n</ul>';const h=localStorage.getItem("todos")?JSON.parse(localStorage.getItem("todos")):[],x=h;document.body.appendChild((()=>{const n=document.createElement("div");return n.classList.add("todo-div"),x.sort(((n,e)=>n.index-e.index)).forEach((n=>{!0===n.completed?v+=`<li class="todo-li todo-container">\n      <div class="todo-input-div">\n        <input type="checkbox" id="check" value=${n.index} checked />\n        <input name="edit-input" type="text" id="edit-input" class="todo-input isChecked" value="${n.description}" readonly/>\n      </div>\n      <p id="${n.index}"><i class="fas fa-ellipsis-v edit-todo "></i><i class="far fa-trash-alt delete-todo inActive"></i></p>\n    </li>`:v+=`<li class="todo-li todo-container">\n        <div class="todo-input-div">\n          <input type="checkbox" id="check" value=${n.index} />\n          <input name="edit-input" type="text" id="edit-input" class="todo-input" value="${n.description}" readonly/>\n        </div>\n        <p id="${n.index}"><i class="fas fa-ellipsis-v edit-todo"></i><i class="far fa-trash-alt delete-todo inActive"></i></p>\n      </li>`})),n.innerHTML=v+"<li><button type='button' class='clear-btn'>Clear All completed</button></li>",n})());const b=document.querySelectorAll(".todo-container");(0,E.Z)(x,b),(0,m.rk)(h),(0,m.bm)(h),(0,m.aS)(h),(0,m.nY)(h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,